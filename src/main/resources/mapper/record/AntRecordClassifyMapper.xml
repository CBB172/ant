<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.boot.record.dao.AntRecordClassifyMapper">
  <resultMap id="BaseResultMap" type="com.java.boot.record.entity.AntRecordClassify">
    <constructor>
      <idArg column="classify_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="fid" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="classify_name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="comment" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="author" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="level" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="isvalid" javaType="java.lang.Boolean" jdbcType="BIT" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    classify_id, fid, user_id, classify_name, comment, author, level, update_time, isvalid
  </sql>
  <select id="selectByExample" parameterType="com.java.boot.record.entity.AntRecordClassifyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from ant_record_classify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ant_record_classify
    where classify_id = #{classifyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ant_record_classify
    where classify_id = #{classifyId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.java.boot.record.entity.AntRecordClassifyExample">
    delete from ant_record_classify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.java.boot.record.entity.AntRecordClassify">
    insert into ant_record_classify (classify_id, fid, user_id, 
      classify_name, comment, author, 
      level, update_time, isvalid
      )
    values (#{classifyId,jdbcType=INTEGER}, #{fid,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, 
      #{classifyName,jdbcType=VARCHAR}, #{comment,jdbcType=VARCHAR}, #{author,jdbcType=INTEGER}, 
      #{level,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, #{isvalid,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.java.boot.record.entity.AntRecordClassify">
    insert into ant_record_classify
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="classifyId != null">
        classify_id,
      </if>
      <if test="fid != null">
        fid,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="classifyName != null">
        classify_name,
      </if>
      <if test="comment != null">
        comment,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isvalid != null">
        isvalid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="classifyId != null">
        #{classifyId,jdbcType=INTEGER},
      </if>
      <if test="fid != null">
        #{fid,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="classifyName != null">
        #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="comment != null">
        #{comment,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isvalid != null">
        #{isvalid,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.java.boot.record.entity.AntRecordClassifyExample" resultType="java.lang.Long">
    select count(*) from ant_record_classify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ant_record_classify
    <set>
      <if test="record.classifyId != null">
        classify_id = #{record.classifyId,jdbcType=INTEGER},
      </if>
      <if test="record.fid != null">
        fid = #{record.fid,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.classifyName != null">
        classify_name = #{record.classifyName,jdbcType=VARCHAR},
      </if>
      <if test="record.comment != null">
        comment = #{record.comment,jdbcType=VARCHAR},
      </if>
      <if test="record.author != null">
        author = #{record.author,jdbcType=INTEGER},
      </if>
      <if test="record.level != null">
        level = #{record.level,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isvalid != null">
        isvalid = #{record.isvalid,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ant_record_classify
    set classify_id = #{record.classifyId,jdbcType=INTEGER},
      fid = #{record.fid,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=VARCHAR},
      classify_name = #{record.classifyName,jdbcType=VARCHAR},
      comment = #{record.comment,jdbcType=VARCHAR},
      author = #{record.author,jdbcType=INTEGER},
      level = #{record.level,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      isvalid = #{record.isvalid,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.java.boot.record.entity.AntRecordClassify">
    update ant_record_classify
    <set>
      <if test="fid != null">
        fid = #{fid,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="classifyName != null">
        classify_name = #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="comment != null">
        comment = #{comment,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isvalid != null">
        isvalid = #{isvalid,jdbcType=BIT},
      </if>
    </set>
    where classify_id = #{classifyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.java.boot.record.entity.AntRecordClassify">
    update ant_record_classify
    set fid = #{fid,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=VARCHAR},
      classify_name = #{classifyName,jdbcType=VARCHAR},
      comment = #{comment,jdbcType=VARCHAR},
      author = #{author,jdbcType=INTEGER},
      level = #{level,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      isvalid = #{isvalid,jdbcType=BIT}
    where classify_id = #{classifyId,jdbcType=INTEGER}
  </update>
</mapper>